(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{80:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return s})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return b}));var n=a(3),i=a(7),r=(a(0),a(88)),o={title:"Routing"},s={unversionedId:"routing",id:"routing",isDocsHomePage:!1,title:"Routing",description:"HTTP routing consists of binding an HTTP route to a C++ callback. A special component called an HTTP router will be in charge of dispatching HTTP requests to the right C++ callback. A route is composed of an HTTP verb associated to a resource:",source:"@site/docs/routing.md",slug:"/routing",permalink:"/docs/routing",editUrl:"https://github.com/pistacheio/pistache/edit/master/pistache.io/docs/routing.md",version:"current",sidebar:"leftSidebar",previous:{title:"Headers",permalink:"/docs/headers"}},c=[{value:"HTTP methods",id:"http-methods",children:[]},{value:"Route patterns",id:"route-patterns",children:[{value:"Static routes",id:"static-routes",children:[]},{value:"Dynamic routes",id:"dynamic-routes",children:[]}]},{value:"Defining routes",id:"defining-routes",children:[{value:"Callbacks",id:"callbacks",children:[]},{value:"Installing the handler",id:"installing-the-handler",children:[]}]}],l={toc:c};function b(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"HTTP routing consists of binding an HTTP route to a C++ callback. A special component called an HTTP router will be in charge of dispatching HTTP requests to the right C++ callback. A route is composed of an HTTP verb associated to a resource:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"GET /users/1\n")),Object(r.b)("p",null,"Here, ",Object(r.b)("inlineCode",{parentName:"p"},"GET")," is the verb and ",Object(r.b)("inlineCode",{parentName:"p"},"/users/1")," is the associated resource."),Object(r.b)("h2",{id:"http-methods"},"HTTP methods"),Object(r.b)("p",null,"A bunch of HTTP methods (verbs) are supported by Pistache:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("em",{parentName:"li"},"GET"),": The ",Object(r.b)("inlineCode",{parentName:"li"},"GET")," method is used by the client (e.g browser) to retrieve a resource identified by an URI. For example, to retrieve an user identified by an id, a client will issue a ",Object(r.b)("inlineCode",{parentName:"li"},"GET")," to the ",Object(r.b)("inlineCode",{parentName:"li"},"/users/:id")," Request-URI."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("em",{parentName:"li"},"POST"),": the ",Object(r.b)("inlineCode",{parentName:"li"},"POST")," method is used to post or send new information to a certain resource. The server will then read and store the data associated to the request. ",Object(r.b)("inlineCode",{parentName:"li"},"POST")," is a common way of transmitting data from an HTML form. ",Object(r.b)("inlineCode",{parentName:"li"},"POST")," can also be used to create a new resource or update information of an existing resource. For example, to create a new user, a client will issue a ",Object(r.b)("inlineCode",{parentName:"li"},"POST")," to the ",Object(r.b)("inlineCode",{parentName:"li"},"/users")," path with the data of the user to create in its body."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("em",{parentName:"li"},"PUT"),": ",Object(r.b)("inlineCode",{parentName:"li"},"PUT")," is very similar to ",Object(r.b)("inlineCode",{parentName:"li"},"POST")," except that ",Object(r.b)("inlineCode",{parentName:"li"},"PUT")," is idempotent, meaning that two requests to the same Request-URI with the same identical content should have the same effect and should produce the same result."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("em",{parentName:"li"},"DELETE"),": the ",Object(r.b)("inlineCode",{parentName:"li"},"DELETE")," method is used to delete a resource associated to a given Request-URI. For example, to remove an user, a client might issue a ",Object(r.b)("inlineCode",{parentName:"li"},"DELETE")," call to the ",Object(r.b)("inlineCode",{parentName:"li"},"/users/:id")," Request-URI.")),Object(r.b)("p",null,"To sum up, ",Object(r.b)("inlineCode",{parentName:"p"},"POST")," and ",Object(r.b)("inlineCode",{parentName:"p"},"PUT")," are used to Create and/or Update, ",Object(r.b)("inlineCode",{parentName:"p"},"GET")," is used to Read and ",Object(r.b)("inlineCode",{parentName:"p"},"DELETE")," is used to Delete information."),Object(r.b)("h2",{id:"route-patterns"},"Route patterns"),Object(r.b)("h3",{id:"static-routes"},"Static routes"),Object(r.b)("p",null,"Static routes are the simplest ones as they do rely on dynamic parts of the Request-URI. For example ",Object(r.b)("inlineCode",{parentName:"p"},"/users/all")," is a static route that will exactly match the ",Object(r.b)("inlineCode",{parentName:"p"},"/users/all")," Request-URI."),Object(r.b)("h3",{id:"dynamic-routes"},"Dynamic routes"),Object(r.b)("p",null,"However, it is often useful to define routes that have dynamic parts. For example, to retrieve a specific user by its id, the id is needed to query the storage. Dynamic routes thus have parameters that are then matched one by one by the HTTP router. In a dynamic route, parameters are identified by a column ",Object(r.b)("inlineCode",{parentName:"p"},":")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"/users/:id")),Object(r.b)("p",null,"Here, ",Object(r.b)("inlineCode",{parentName:"p"},":id")," is a dynamic parameter. When a request comes in, the router will try to match the ",Object(r.b)("inlineCode",{parentName:"p"},":id")," parameter to the corresponding part of the request. For example, if the server receives a request to ",Object(r.b)("inlineCode",{parentName:"p"},"/users/13"),", the router will match the ",Object(r.b)("inlineCode",{parentName:"p"},"13")," value to the ",Object(r.b)("inlineCode",{parentName:"p"},":id")," parameter."),Object(r.b)("p",null,"Some parameters, like ",Object(r.b)("inlineCode",{parentName:"p"},":id")," are named. However, Pistache also allows ",Object(r.b)("em",{parentName:"p"},"splat")," (wildcard) parameters, identified by a star ",Object(r.b)("inlineCode",{parentName:"p"},"*"),":"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"/link/*/to/*")),Object(r.b)("h2",{id:"defining-routes"},"Defining routes"),Object(r.b)("p",null,"To define your routes, you first have to instantiate an HTTP router:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cpp"},"Http::Router router;\n")),Object(r.b)("p",null,"Then, use the ",Object(r.b)("inlineCode",{parentName:"p"},"Routes::<Method>()")," functions to add some routes:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cpp"},'Routes::Get(router, "/users/all", Routes::bind(&UsersApi::getAllUsers, this));\nRoutes::Post(router, "/users/:id", Routes::bind(&UsersApi::getUserId, this));\nRoutes::Get(router, "/link/*/to/*", Routes::bind(&UsersApi::linkUsers, this));\n')),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Routes::bind")," is a special function that will generate a corresponding C++ callback that will then be called by the router if a given route matches the Request-URI."),Object(r.b)("h3",{id:"callbacks"},"Callbacks"),Object(r.b)("p",null,"A C++ callback associated to a route must have the following signature:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cpp"},"void(const Rest::Request&, Http::ResponseWriter);\n")),Object(r.b)("p",null,"A callback can either be a non-static free or member function. For member functions, a pointer to the corresponding instance must be passed to the Routes::bind function so that the router knows on which instance to invoke the member function."),Object(r.b)("p",null,"The first parameter of the callback is ",Object(r.b)("inlineCode",{parentName:"p"},"Rest::Request")," and not an ",Object(r.b)("inlineCode",{parentName:"p"},"Http::Request"),". A ",Object(r.b)("inlineCode",{parentName:"p"},"Rest::Request")," is an ",Object(r.b)("inlineCode",{parentName:"p"},"Http::Request")," with additional functions. Named and splat parameters are for example retrieved through this object:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cpp"},'void UsersApi::getUserId(const Rest::Request& request, Http::ResponseWriter response) {\n    auto id = request.param(":id").as<int>();\n    // ...\n}\n\nvoid UsersApi::linkUsers(const Rest::Request& request, Http::ResponseWriter response) {\n    auto u1 = request.splatAt(0).as<std::string>();\n    auto u2 = request.splatAt(1).as<std::string>();\n    // ...\n}\n')),Object(r.b)("p",null,"As you can see, parameters are also typed. To cast a parameter to the appropriate type, use the ",Object(r.b)("inlineCode",{parentName:"p"},"as<T>")," member template."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Cast safety")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"An exception will be thrown if the parameter can not be casted to the right type"))),Object(r.b)("h3",{id:"installing-the-handler"},"Installing the handler"),Object(r.b)("p",null,"Once the routes have been defined, the final ",Object(r.b)("inlineCode",{parentName:"p"},"Http::Handler")," must be set to the HTTP Endpoint. To retrieve the handler, just call the ",Object(r.b)("inlineCode",{parentName:"p"},"handler()")," member function on the router object:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cpp"},"endpoint.setHandler(router.handler());\n")))}b.isMDXComponent=!0}}]);