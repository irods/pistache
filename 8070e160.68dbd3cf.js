(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{72:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return r})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(3),l=n(7),i=(n(0),n(88)),s={title:"Getting started",slug:"/"},r={unversionedId:"quickstart",id:"quickstart",isDocsHomePage:!1,title:"Getting started",description:"Pistache is a web framework written in Modern C++ that focuses on performance and provides an elegant and asynchronous API.",source:"@site/docs/quickstart.md",slug:"/",permalink:"/docs/",editUrl:"https://github.com/pistacheio/pistache/edit/master/pistache.io/docs/quickstart.md",version:"current",sidebar:"leftSidebar",next:{title:"HTTP handler",permalink:"/docs/http-handler"}},c=[{value:"Installing Pistache",id:"installing-pistache",children:[]},{value:"Serving requests",id:"serving-requests",children:[{value:"Include",id:"include",children:[]},{value:"Hello world",id:"hello-world",children:[]},{value:"Final touch",id:"final-touch",children:[]}]}],o={toc:c};function p(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Pistache is a web framework written in Modern C++ that focuses on performance and provides an elegant and asynchronous API."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#include <pistache/pistache.h>\n")),Object(i.b)("h2",{id:"installing-pistache"},"Installing Pistache"),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://git-scm.com"},"git")," is needed to retrieve the sources. Compiling the sources will require ",Object(i.b)("a",{parentName:"p",href:"https://cmake.org"},"CMake")," to generate build files and a recent compiler that supports C++17."),Object(i.b)("p",null,"If you're on Ubuntu and want to skip the compilation process you can add the official PPA providing nightly builds:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},"sudo add-apt-repository ppa:pistache+team/unstable\nsudo apt update\nsudo apt install libpistache-dev\n")),Object(i.b)("p",null,"Otherwise, here's how to build and install the latest release:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},"git clone --recurse-submodules https://github.com/pistacheio/pistache.git\ncd pistache\nmkdir build && cd build\ncmake -DCMAKE_BUILD_TYPE=Release ..\nmake\nsudo make install\n")),Object(i.b)("p",null,"Also, Pistache does not support Windows yet, but should work fine under ",Object(i.b)("a",{parentName:"p",href:"https://docs.microsoft.com/windows/wsl/about"},"WSL"),"."),Object(i.b)("h2",{id:"serving-requests"},"Serving requests"),Object(i.b)("h3",{id:"include"},"Include"),Object(i.b)("p",null,"First, let\u2019s start by including the right header."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"#include <pistache/endpoint.h>\n")),Object(i.b)("h3",{id:"hello-world"},"Hello world"),Object(i.b)("p",null,"Requests received by Pistache are handled with an ",Object(i.b)("inlineCode",{parentName:"p"},"Http::Handler"),"."),Object(i.b)("p",null,"Let\u2019s start by defining a simple ",Object(i.b)("inlineCode",{parentName:"p"},"HelloHandler"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},'using namespace Pistache;\n\nclass HelloHandler : public Http::Handler {\npublic:\n\n    HTTP_PROTOTYPE(HelloHandler)\n\n    void onRequest(const Http::Request& request, Http::ResponseWriter response) {\n        response.send(Http::Code::Ok, "Hello, World\\n");\n    }\n};\n')),Object(i.b)("p",null,"Handlers must inherit the ",Object(i.b)("inlineCode",{parentName:"p"},"Http::Handler")," class and at least define the ",Object(i.b)("inlineCode",{parentName:"p"},"onRequest")," member function. They must also define a ",Object(i.b)("inlineCode",{parentName:"p"},"clone()")," member function. Simple handlers can use the special ",Object(i.b)("inlineCode",{parentName:"p"},"HTTP_PROTOTYPE")," macro, passing in the name of the class. The macro will take care of defining the ",Object(i.b)("inlineCode",{parentName:"p"},"clone()")," member function for you."),Object(i.b)("h3",{id:"final-touch"},"Final touch"),Object(i.b)("p",null,"After defining the handler, the server can now be started:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"int main() {\n    Address addr(Ipv4::any(), Port(9080));\n\n    auto opts = Http::Endpoint::options().threads(1);\n    Http::Endpoint server(addr);\n    server.init(opts);\n    server.setHandler(Http::make_handler<HelloHandler>());\n    server.serve();\n}\n")),Object(i.b)("p",null,"For simplicity, you can also use the special ",Object(i.b)("inlineCode",{parentName:"p"},"listenAndServe")," function that will automatically create an endpoint and instantiate your handler:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},'int main() {\n    Http::listenAndServe<HelloHandler>("*:9080");\n}\n')),Object(i.b)("p",null,"And that\u2019s it, now you can fire up your favorite curl request and observe the final result:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},"curl http://localhost:9080/\nHello, World\n")),Object(i.b)("p",null,"Complete code for this example can be found on GitHub: ",Object(i.b)("a",{parentName:"p",href:"https://github.com/pistacheio/pistache/blob/master/examples/hello_server.cc"},"examples/hello_server.cc")))}p.isMDXComponent=!0}}]);